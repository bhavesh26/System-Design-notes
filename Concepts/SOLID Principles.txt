1. Single Responsibility Principle (SRP)
ðŸ“Œ Each class should have only one reason to change.

class UserService {
  getUser(id: string) {
    // Fetch user from DB
  }

  sendEmail(email: string, message: string) {
    // Sends email (should not be here)
  }
}
âœ… Good Example: (Separate Concerns)

class UserService {
  getUser(id: string) {
    // Fetch user from DB
  }
}

class EmailService {
  sendEmail(email: string, message: string) {
    // Sends email
  }
}



2. Open/Closed Principle (OCP)
ðŸ“Œ Open for extension but closed for modification.

ðŸ”´ Bad Example: (Modifying existing class)
class PaymentService {
  processPayment(type: string) {
    if (type === "creditCard") {
      console.log("Processing credit card payment...");
    } else if (type === "paypal") {
      console.log("Processing PayPal payment...");
    }
  }
}
âœ… Good Example: (Use abstraction to extend without modifying)
interface PaymentMethod {
  pay(): void;
}

class CreditCardPayment implements PaymentMethod {
  pay() {
    console.log("Processing credit card payment...");
  }
}

class PayPalPayment implements PaymentMethod {
  pay() {
    console.log("Processing PayPal payment...");
  }
}

class PaymentService {
  processPayment(payment: PaymentMethod) {
    payment.pay();
  }
}

// Usage:
const paymentService = new PaymentService();
paymentService.processPayment(new PayPalPayment());


3. Liskov Substitution Principle (LSP)
ðŸ“Œ A subclass should be replaceable for its parent class without breaking the code.

ðŸ”´ Bad Example: (Penguin cannot fly but still inherits fly())
class Bird {
  fly() {
    console.log("Flying...");
  }
}

class Penguin extends Bird {
  fly() {
    throw new Error("Penguins cannot fly!");
  }
}

âœ… Good Example: (Separate Flying and Non-Flying Birds)
abstract class Bird {}

interface CanFly {
  fly(): void;
}

class Sparrow extends Bird implements CanFly {
  fly() {
    console.log("Flying...");
  }
}

class Penguin extends Bird {
  swim() {
    console.log("Swimming...");
  }
}


4. Interface Segregation Principle (ISP)
ðŸ“Œ A class should not be forced to implement interfaces it does not use.

ðŸ”´ Bad Example: (Unnecessary methods for Robots)
interface Worker {
  work(): void;
  eat(): void;
}

class HumanWorker implements Worker {
  work() {
    console.log("Working...");
  }

  eat() {
    console.log("Eating...");
  }
}

class RobotWorker implements Worker {
  work() {
    console.log("Working...");
  }

  eat() {
    throw new Error("Robots donâ€™t eat!"); // Violates ISP
  }
}

âœ… Good Example: (Separate interfaces)
interface Workable {
  work(): void;
}

interface Eatable {
  eat(): void;
}

class Human implements Workable, Eatable {
  work() {
    console.log("Working...");
  }

  eat() {
    console.log("Eating...");
  }
}

class Robot implements Workable {
  work() {
    console.log("Working...");
  }
}


5. Dependency Inversion Principle (DIP)
ðŸ“Œ High-level modules should depend on abstractions, not low-level modules.

ðŸ”´ Bad Example: (Tightly coupled dependency)
class MySQLDatabase {
  query(sql: string) {
    console.log(`Executing SQL: ${sql}`);
  }
}

class UserService {
  private db = new MySQLDatabase(); // Hardcoded dependency

  getUser(id: string) {
    this.db.query(`SELECT * FROM users WHERE id=${id}`);
  }
}


âœ… Good Example: (Use an abstraction)
interface Database {
  query(sql: string): void;
}

class MySQLDatabase implements Database {
  query(sql: string) {
    console.log(`Executing SQL: ${sql}`);
  }
}

class PostgreSQLDatabase implements Database {
  query(sql: string) {
    console.log(`Executing PostgreSQL Query: ${sql}`);
  }
}

class UserService {
  constructor(private db: Database) {}

  getUser(id: string) {
    this.db.query(`SELECT * FROM users WHERE id=${id}`);
  }
}

// Usage:
const db = new MySQLDatabase();
const userService = new UserService(db);
userService.getUser("123");




Summary:
Principle	Key Idea	Example Solution
SRP	One responsibility per class	Separate UserService and EmailService
OCP	Extend without modifying existing code	Use interfaces instead of modifying a class
LSP	Subtypes should be replaceable for base types	Use FlyingBird and NonFlyingBird
ISP	Don't force classes to implement unused methods	Separate Workable and Eatable interfaces
DIP	Depend on abstractions, not concrete classes	Use Database interface instead of MySQLDatabase




Why Use SOLID in Node.js?
âœ… Easier to maintain
âœ… Less code duplication
âœ… Improved scalability
âœ… Easier to test (dependency injection)
